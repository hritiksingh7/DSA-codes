public:
    bool isSafe(int grid[N][N], int row, int col, int val){
        
        for(int i=0; i<9; i++){
            
            if(grid[i][col] == val)
            return 0;
            
            if(grid[row][i] == val)
            return 0;
            
            if(grid[3*(row/3) + i/3][3*(col/3) + i%3] == val)
            return 0;
        }
        
        return 1;
    }
    bool solve(int grid[N][N]){
        
        for(int i=0; i<N; i++){
            for(int j=0; j<N; j++){
                if(grid[i][j] == 0){
                    for(int k=1; k<=9; k++){
                        if(isSafe(grid, i, j, k)){
                            grid[i][j] = k;
                            
                            bool valid = solve(grid);
                            
                            if(valid)
                            return true;
                            
                            else{
                                grid[i][j] = 0;
                            }
                        }
                    }
                    return false;
                }
            }
        }
        
        return true;
    }
    //Function to find a solved Sudoku. 
    bool SolveSudoku(int grid[N][N])  
    { 

        return solve(grid);
    }
    
    //Function to print grids of the Sudoku.
    void printGrid (int grid[N][N]) 
    {
        // Your code here 
        for(int row=0; row<N; row++){
            for(int col=0; col<N; col++){
                cout<<grid[row][col]<<" ";
            }
        }
    }
