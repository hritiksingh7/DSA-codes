// TOP DOWN || RECURSION + MEMOIZATION

#include<vector>
#include<limits.h>

#define MOD 1000000007

int solveMem(int &maxi, int n, int m, vector<vector<int>> &mat, int i, int j, vector<vector<int>> &dp){
        
        if(i>=n || j>=m) return 0;
        
        if(dp[i][j] != -1) return dp[i][j];
        
        int right = solveMem(maxi, n, m, mat, i, j+1, dp);
        int diagonal = solveMem(maxi, n, m, mat, i+1, j+1, dp);
        int down = solveMem(maxi, n, m, mat, i+1, j, dp);
        
        if(mat[i][j] == 1){
            int ans = 1 + min(right, min(diagonal, down));
            maxi = max(maxi, ans);
            return dp[i][j] = ans;
        }
        else{
            return dp[i][j] = 0;
        }
    }

    
    int maxSquare(int n, int m, vector<vector<int>> mat){
         int maxi = 0;
         vector<vector<int>> dp(n, vector<int>(m, -1));
         int ans = solveMem(maxi, n, m, mat, 0, 0, dp);
         return maxi;
    }




// BOTTOM UP || TABULATION
    
    int solveTab(int n, int m, vector<vector<int>> &mat, int &maxi){
        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
        
        for(int i=n-1; i>=0; i--){
            for(int j=m-1; j>=0; j--){
                
                int right = dp[i][j+1];
                int diagonal = dp[i+1][j+1];
                int down = dp[i+1][j];
                
                if(mat[i][j] == 1){
                    dp[i][j] = 1 + min(right, min(diagonal, down));
                    maxi = max(maxi, dp[i][j]);
                }
                else{
                    dp[i][j] = 0;
                }
            }
        }
        
        return dp[0][0];
    }
    
    int maxSquare(int n, int m, vector<vector<int>> mat){
        
        int maxi = 0;
        int ans = solveTab(n, m, mat, maxi);
        return maxi;
    }




// SPACE OPTIMIZATION

int maxSquare(int n, int m, vector<vector<int>> mat){
        
        vector<int> curr(m+1, 0);
        vector<int> next(m+1, 0);
        int maxi = 0;
        
        for(int i=n-1; i>=0; i--){
            for(int j=m-1; j>=0; j--){
                
                int right = curr[j+1];
                int diagonal = next[j+1];
                int down = next[j];
                
                if(mat[i][j] == 1){
                    curr[j] = 1 + min(right, min(diagonal, down));
                    maxi = max(maxi, curr[j]);
                }
                else{
                    curr[j] = 0;
                }
            }
            next = curr;
        }
        return maxi;
    }



