// TOP DOWN || RECURSION + MEMOIZATION

#include<vector>
#include<limits.h>

#define MOD 1000000007

long long int add(int a, int b){
    return ((a%MOD) + (b%MOD))%MOD;
}

long long int mul(int a, int b){
    return ((a%MOD) * 1LL * (b%MOD)) % MOD;
}

int solve(int n, int k, vector<int> &dp){
    if(n==1) return k;
    if(n==2) return mul(k, k);

    if(dp[n] != -1) return dp[n];

    return dp[n] = add(mul(k-1, solve(n-1, k, dp)) , mul(k-1, solve(n-2, k, dp)));
}

int numberOfWays(int n, int k) {
    // Write your code here.

    vector<int> dp(n+1, -1);
    return solve(n, k , dp);
}




// BOTTOM UP || TABULATION

int numberOfWays(int n, int k) {

    vector<int> dp(n+1);

    dp[1] = k;
    dp[2] = mul(k, k);

    for(int i=3; i<=n; i++){
        dp[i] = add(mul(k-1, dp[i-1]) , mul(k-1, dp[i-2]));
    }

    return dp[n];
}




// SPACE OPTIMIZATION

int numberOfWays(int n, int k) {

    int prev2 = k;
    int prev1 = mul(k, k);

    for(int i=3; i<=n; i++){
        int ans = add(mul(k-1, prev1) , mul(k-1, prev2));
        prev2 = prev1;
        prev1 = ans;
    }

    return prev1;
}

