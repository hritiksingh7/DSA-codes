// TOP DOWN || RECURSION + MEMOIZATION

#include<vector>
#include<limits.h>

#define MOD 1000000007

int solveMem(vector<int> weight, vector<int> value, int index, int capacity, vector<vector<int>> &dp){

	// only one option to steal
	if(index == 0){
		if(weight[0] <= capacity) return value[0];
		else return 0;
	}

	if(dp[index][capacity] != -1) return dp[index][capacity];

	int include = 0, exclude;

	if(weight[index] <= capacity)
	include = value[index] + solveMem(weight, value, index-1, capacity - weight[index], dp);

	exclude = solveMem(weight, value, index-1, capacity, dp);

	return dp[index][capacity] = max(include, exclude);
	
}

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	vector<vector<int>> dp(n, vector<int>(maxWeight+1, -1));
	return solveMem(weight, value, n-1, maxWeight, dp);
}




// BOTTOM UP || TABULATION

int solveTab(vector<int> weight, vector<int> value, int n, int capacity){

	vector<vector<int>> dp(n+1, vector<int>(capacity+1, 0));

	for(int w=weight[0]; w<=capacity; w++){
		if(weight[0] <= capacity)
		dp[0][w] = value[0];
	}

	for(int index=1; index<=n; index++){
		for(int w=0; w<=capacity; w++){

			int include = 0;

			if(w - weight[index] >= 0){
				include = value[index] + dp[index-1][w - weight[index]];
			}

			int exclude = 0 + dp[index-1][w];

			dp[index][w] = max(include, exclude);
		}
	}

	return dp[n][capacity];

}

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	return solveTab(weight, value, n-1, maxWeight);

}




// SPACE OPTIMIZATION


/// Using only 1 array

int solveSO(vector<int> weight, vector<int> value, int n, int capacity){
	vector<int> curr(capacity+1, 0);

	for(int w=weight[0]; w<=capacity; w++){
		if(weight[0] <= capacity)
		curr[w] = value[0];
	}

	for(int index=1; index<=n; index++){
		for(int w=capacity; w>=0; w--){

			int include = 0;

			if(w - weight[index] >= 0){
				include = value[index] + curr[w - weight[index]];
			}

			int exclude = 0 + curr[w];

			curr[w] = max(include, exclude);
		}
	}

	return curr[capacity];
}

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	return solveSO(weight, value, n-1, maxWeight);

}

