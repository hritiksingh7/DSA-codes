// TOP DOWN || RECURSION + MEMOIZATION

#define mod 1e9+7

int solveRec(vector<int> &nums, int x, vector<int> &dp){
    if(x==0) return 0;
    if(x < 0) return INT_MAX;
    if(dp[x] != -1) return dp[x];
    int mini = INT_MAX;

    for(int i=0; i<nums.size(); i++){
        int ans = solveRec(nums, x-nums[i], dp);
        if(ans!=INT_MAX) mini = min(mini, 1+ans);
    }

    return dp[x] = mini;
}
int minimumElements(vector<int> &num, int x)
{
    // Write your code here.
    vector<int> dp(x+1, -1);
    int ans = solveRec(num, x, dp);
    if(ans == INT_MAX) return -1;
    return ans;
    
}


// BOTTOM UP || TABULATION

int minimumElements(vector<int> &num, int x)
{
    // Write your code here.
    // vector<int> dp(x+1, -1);
    // int ans = solveRec(num, x, dp);
    // if(ans == INT_MAX) return -1;
    // return ans;

    vector<int> dp(x+1, INT_MAX);
    dp[0] = 0;

    for(int i=1; i<=x; i++){
        for(int j=0; j<num.size(); j++){
            if(i-num[j] >= 0 && dp[i-num[j]] != INT_MAX){
                dp[i] = min(dp[i], 1+dp[i-num[j]]);
            }
        }
    }
    if(dp[x] == INT_MAX) return -1;
    return dp[x];
    
}


// SPACE OPTIMIZATION

