// TOP DOWN || RECURSION + MEMOIZATION

#include<vector>
#include<limits.h>

#define MOD 1000000007

int solve(vector<int> &num, int tar, vector<int> &dp){
    if(tar < 0) return 0;
    if(tar == 0) return 1;

    if(dp[tar] != -1) return dp[tar];
    int ans = 0;
    for(int i=0; i<num.size(); i++){
        ans += solve(num, tar-num[i], dp);
    }

    return dp[tar] = ans;
}

int findWays(vector<int> &num, int tar)
{
     vector<int> dp(tar+1, -1);
     return solve(num, tar, dp);
}




// BOTTOM UP || TABULATION

int findWays(vector<int> &num, int tar)
{
    vector<int> dp(tar+1, 0);

    dp[0] = 1;

    for(int i=1; i<=tar; i++){
        for(int j=0; j<num.size(); j++){

            if(i - num[j] >= 0)
            dp[i] += dp[i-num[j]];
        }
    }

    return dp[tar];
}




// SPACE OPTIMIZATION


