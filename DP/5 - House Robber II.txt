// TOP DOWN || RECURSION + MEMOIZATION

#define mod 1e9+7

#include<limits.h>

int solve(int n, int x, int y, int z, vector<int> &dp){
	if(n == 0) return 0;
	if(n<0) return INT_MIN;

	if(dp[n] != -1) return dp[n];

	int a = solve(n-x, x, y, z, dp) + 1;
	int b = solve(n-y, x, y, z, dp) + 1;
	int c = solve(n-z, x, y, z,dp) + 1;

	return dp[n] = max(a, max(b, c));

}


int cutSegments(int n, int x, int y, int z) {
	// Write your code here.
	vector<int> dp(n+1, -1);
	int ans = solve(n, x, y, z, dp);
	return ans<0 ? 0 : ans;
}




// BOTTOM UP || TABULATION

int cutSegments(int n, int x, int y, int z) {
	// Write your code here.
	// vector<int> dp(n+1, -1);
	// int ans = solve(n, x, y, z, dp);
	// return ans<0 ? 0 : ans;

	vector<int> dp(n+1);

	dp[0] = 0;

	for(int i=1; i<=n; i++){
		int a=INT_MIN;
		int b=INT_MIN;
		int c=INT_MIN;
		if(i-x >= 0 && dp[i-x] != INT_MIN) a = 1 + dp[i-x];
		if(i-y >= 0 && dp[i-y] != INT_MIN) b = 1 + dp[i-y];
		if(i-z >= 0 && dp[i-z] != INT_MIN) c = 1 + dp[i-z];

		dp[i] = max(a, max(b, c));
	}

	return dp[n]<0 ? 0 : dp[n];
}




// SPACE OPTIMIZATION

