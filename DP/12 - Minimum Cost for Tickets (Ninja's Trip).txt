// TOP DOWN || RECURSION + MEMOIZATION

#include<vector>
#include<limits.h>

#define MOD 1000000007

int solveMem(int n, vector<int> days, vector<int> cost, int index,vector<int> &dp){

    if(index >= n) return 0;
    if(dp[index] != -1) return dp[index];

    int option1 = cost[0] + solveMem(n, days, cost, index+1, dp);

    int i = index;

    while(days[i] < days[index] + 7 && i<n) i++;
    int option2 = cost[1] + solveMem(n, days, cost, i, dp);


    while(days[i] < days[index] + 30 && i<n) i++;
    int option3 = cost[2] + solveMem(n, days, cost, i, dp);

    return dp[index] = min(option1, min(option2, option3));
}

int minimumCoins(int n, vector<int> days, vector<int> cost)
{
    vector<int> dp(n+1, -1);
    return solveMem(n, days, cost, 0, dp);
}




// BOTTOM UP || TABULATION


int minimumCoins(int n, vector<int> days, vector<int> cost)
{
    vector<int> dp(n+1, INT_MAX);

    dp[n] = 0;

    for(int k=n-1; k>=0; k--){

        int option1 = cost[0] + dp[k+1];

        int i = k;
        while(days[i] < days[k] + 7 && i<n) i++;

        int option2 = cost[1] + dp[i];


        while(days[i] < days[k] + 30 && i<n) i++;
        int option3 = cost[2] + dp[i];

        dp[k] = min(option1, min(option2, option3));
    }
    return dp[0];
}




// SPACE OPTIMIZATION


int minimumCoins(int n, vector<int> days, vector<int> cost)
{

    int ans = 0;

    queue<pair<int, int>> month;
    queue<pair<int, int>> week;

    for(int day: days){

        while(!month.empty() && month.front().first + 30 <= day) month.pop();
        month.push({day, ans+cost[2]});

        while(!week.empty() && week.front().first + 7 <= day) week.pop();
        week.push({day, ans+cost[1]});

        ans = min(ans + cost[0], min(week.front().second, month.front().second));
        
    }

    return ans;
}

