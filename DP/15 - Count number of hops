long long solve(int n, vector<int> &dp){
        if(n==1) return 1;
        if(n==2) return 2;
        if(n==3) return 4;
        
        if(dp[n] != -1) return dp[n];
        
        return dp[n] = (solve(n-1, dp)%MOD + solve(n-2, dp)%MOD + solve(n-3, dp)%MOD)%MOD;
    }
    //Function to count the number of ways in which frog can reach the top.
    long long countWays(int n)
    {
        // vector<int> dp(n+1, -1);
        // return solve(n, dp);
        
    
        // TABULATION
        vector<long long> dp(n+1, 0);
        
        if(n==1 || n==2) return n;
        
        dp[1] = 1; dp[2] = 2; dp[3] = 4;
        
        for(int i=4; i<=n; i++){
            dp[i] = (dp[i-1]%MOD + dp[i-2]%MOD + dp[i-3]%MOD)%MOD;
            // dp[i] = (dp[i-1]%MOD + dp[i-2]%MOD + dp[i-3]%MOD)%MOD;
        }
        
        return dp[n];
    }
