void topoSort(unordered_map<int, list<pair<int, int>>> adjList, stack<int> &st,
                      unordered_map<int, bool> &vis, int top){
      
      vis[top] = 1;
      
      for(auto neighbour: adjList[top]){
          if(!vis[neighbour.first]){
              vis[neighbour.first] = 1;
              topoSort(adjList, st, vis, neighbour.first);
          }
      }
      
      st.push(top);
      return;
      
  }
  
  vector<int> solve(stack<int> st, unordered_map<int, list<pair<int, int>>> adjList, int N){
      
      
      vector<int> dist(N, -1);
      dist[0] = 0;
      
      while(!st.empty()){
          int top = st.top();
          st.pop();
          
        //   cout<<top<<endl;
          
          if(dist[top] == -1)
          continue;
          
          for(auto neighbour: adjList[top]){
              int currNeighbour = neighbour.first;
              int newDist = dist[top] + neighbour.second;
              
              if(dist[currNeighbour] == -1)
              dist[currNeighbour] = newDist;
              
              if(dist[currNeighbour] > newDist)
              dist[currNeighbour] = newDist;
              
            //   if(top == 5 && currNeighbour == 6)
            //   cout<<dist[currNeighbour]<<" "<<newDist<<endl;
          }
      }
      
      return dist;
      
      
  }
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
         
         unordered_map<int, list<pair<int, int>>> adjList;
         
         for(int i=0; i<M; i++){
             int parent = edges[i][0];
             int child = edges[i][1];
             int dist = edges[i][2];
             
             adjList[parent].push_back(make_pair(child, dist));
         }
        stack<int> st;
        unordered_map<int, bool> vis;
        topoSort(adjList, st, vis, 0);
        return solve(st, adjList, N);
    }
