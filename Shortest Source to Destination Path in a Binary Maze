    int shortestDistance(int N, int M, vector<vector<int>> A, int X, int Y) {
        // code here
        int ans = -1;
        
        if(X == 0 && Y == 0)
        return 0;
        
        queue<pair<int, pair<int, int>>> q;
        vector<vector<int>> visited(N, vector<int>(M, 0));
        
        q.push({0, {0,0}});
        
        while(!q.empty()){
            
            auto front = q.front();
            q.pop();
            
            int row = front.second.first;
            int col = front.second.second;
            int dist = front.first;
            
            visited[row][col] = 1;
            
            if(col > 0 && A[row][col-1] == 1 && visited[row][col-1] == 0){
                q.push({dist+1, {row, col-1}});
                visited[row][col-1] = 1;
                
                if(row == X && col - 1 == Y)
                return dist + 1;
            }
            
            if(col < M-1 && A[row][col+1] == 1 && visited[row][col+1] == 0){
                q.push({dist+1, {row, col+1}});
                visited[row][col+1] = 1;
                
                if(row == X && col + 1 == Y)
                return dist + 1;
            }
            
            if(row > 0 && A[row-1][col] == 1 && visited[row-1][col] == 0){
                q.push({dist+1, {row-1, col}});
                visited[row-1][col] = 1;
                
                if(row - 1 == X && col == Y)
                return dist + 1;
            }
            
            if(row < N-1 && A[row+1][col] == 1 && visited[row+1][col] == 0){
                q.push({dist+1, {row+1, col}});
                visited[row+1][col] = 1;
                
                if(row + 1 == X && col == Y)
                return dist + 1;
            }
        }
        
        return ans;
    }
