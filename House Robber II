#include <bits/stdc++.h> 

long long solve(vector<int>& valueInHouse){
  
    int n = valueInHouse.size();

    long long prev2=0, prev1=valueInHouse[0];

    for(int i=1; i<n; i++){
        long long inc = prev2 + valueInHouse[i];
        long long exc = prev1;

        long long ans = max(inc, exc);

        prev2 = prev1;
        prev1 = ans;
    }

    return prev1;
}
long long int houseRobber(vector<int>& valueInHouse)
{
   // Write your code here.

SPACE OPTIMISE
    int n = valueInHouse.size();

    if(n==1)
    return valueInHouse[0];

    vector<int> first, second;
    

    for(int i=0; i<n; i++){
        if(i != 0)
        first.push_back(valueInHouse[i]);

        if(i != n-1)
        second.push_back(valueInHouse[i]);
    }

    long long f = solve(first);
    long long s = solve(second);

    return max(f, s);

TABULATION
    // int n = valueInHouse.size();

    // if(n==1)
    // return valueInHouse[0];
    
    // vector<long long int> dp(n-1);

    // dp[0] = valueInHouse[0];
    // dp[1] = max(valueInHouse[0], valueInHouse[1]);

    // for(int i=2; i<n-1; i++){
    //     long long int inc = dp[i-2] + valueInHouse[i];
    //     long long int exc = dp[i-1];

    //     dp[i] = max(inc, exc);
    // }


    // vector<long long int> dp1(n);

    // dp1[0] = 0;
    // dp1[1] = valueInHouse[1];

    // for(int i=2; i<n; i++){
    //     long long int inc = dp1[i-2] + valueInHouse[i];
    //     long long int exc = dp1[i-1];

    //     dp1[i] = max(inc, exc);
    // }

    // return max(dp[n-2], dp1[n-1]);
}
