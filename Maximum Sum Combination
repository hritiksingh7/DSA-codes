 vector<int> maxCombinations(int N, int K, vector<int> &A, vector<int> &B) {
        // code here
        sort(A.begin(),A.end());
        sort(B.begin(),B.end());
        
        vector<int>ans;
        priority_queue<pair<int, pair<int, int>>> pq;
        set<pair<int, int>> vis;
        
        pq.push({A[N-1] + B[N-1], {N-1, N-1}});
        vis.insert({N-1, N-1});
        
        while(K--){
            auto top = pq.top();
            pq.pop();
            
            int sum = top.first;
            int ind1 = top.second.first;
            int ind2 = top.second.second;
            
            ans.push_back(sum);
            
            if(vis.find({ind1-1, ind2}) == vis.end()){
                pq.push({A[ind1-1] + B[ind2], {ind1-1, ind2}});
                vis.insert({ind1-1, ind2});
            }
            
            if(vis.find({ind1, ind2-1}) == vis.end()){
                pq.push({A[ind1] + B[ind2-1], {ind1, ind2-1}});
                vis.insert({ind1, ind2-1});
            }
        }
        
        return ans;
        
    }
