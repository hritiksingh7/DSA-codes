int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int n = grid.size();
        int m = grid[0].size();
        
        queue<pair<pair<int, int>, int>> q;
        int currTime = 0;
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 2)
                q.push({{i, j}, 0});
            }
        }
        
        while(!q.empty()){
            auto front = q.front();
            q.pop();
            
            int row = front.first.first;
            int col = front.first.second;
            currTime = front.second;
            
            if(row>0 && grid[row-1][col] == 1){
                grid[row-1][col] = 2;
                q.push({{row-1, col}, currTime+1});
            }
            
            if(row<n-1 && grid[row+1][col] == 1){
                grid[row+1][col] = 2;
                q.push({{row+1, col}, currTime+1});
            }
            
            if(col>0 && grid[row][col-1] == 1){
                grid[row][col-1] = 2;
                q.push({{row, col-1}, currTime+1});
            }
            
            if(col<m-1 && grid[row][col+1] == 1){
                grid[row][col+1] = 2;
                q.push({{row, col+1}, currTime+1});
            }
        }
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 1)
                return -1;
            }
        }
        
        return currTime;
    }
