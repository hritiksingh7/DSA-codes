struct Node* reverseList(struct Node *head)
    {
        // code here
        // return head of reversed list
        if(head == NULL || head->next == NULL)
        return head;
        
        Node* prev = NULL;
        Node* curr = head;
        Node* next = head;
        
        while(curr){
            
            // step 1
            next = curr->next;
            
            // step 2 reversing
            curr->next = prev;
            
            //step 3
            prev = curr;
            
            //step 4
            curr = next;
            
        }
        
        return prev;
    }


 Node* mergeTwoLists(Node* list1, Node* list2) {

        if(!list1)
        return list2;

        if(!list2)
        return list1;

        Node* curr1 = list1;
        Node* next1 = curr1;
        Node* curr2 = list2;
        Node* next2 = curr2;

        Node* head = NULL;

        if(curr1->data <= curr2->data)
        head = list1;
        else
        head = list2;

        while(curr1 && curr2){
            if(curr1->data > curr2->data){
                while(curr2->next && (curr2->next)->data < curr1->data){
                    curr2 = curr2->next;
                    next2 = curr2;
                }

                next2 = curr2->next;
                curr2->next = curr1;
                curr2 = next2;

            }
            else{
                while(curr1->next && (curr1->next)->data <= curr2->data){
                    curr1 = curr1->next;
                    next1 = curr1;
                }

                next1 = curr1->next;
                curr1->next = curr2;
                curr1 = next1;
            }
        }

        return head;
    }

struct Node * mergeResult(Node *node1,Node *node2)
{
    // your code goes here
    
    Node* increasingMerge = mergeTwoLists(node1, node2);
    return reverseList(increasingMerge);
}
