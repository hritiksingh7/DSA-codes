void dfs(vector<vector<char>> &mat, int n, int m, int i, int j){
        mat[i][j] = '1';
        
        if(j>0 && mat[i][j-1] == 'O') dfs(mat, n, m, i, j-1);
        if(i>0 && mat[i-1][j] == 'O') dfs(mat, n, m, i-1, j);
        if(i<n-1 && mat[i+1][j] == 'O') dfs(mat, n, m, i+1, j);
        if(j<m-1 && mat[i][j+1] == 'O') dfs(mat, n, m, i, j+1);
    }
    
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        
        for(int i=0; i<m; i++){
            if(mat[0][i] == 'O') dfs(mat, n, m, 0, i);
            if(mat[n-1][i] == 'O') dfs(mat, n, m, n-1, i);
        }
        
        for(int i=0; i<n; i++){
            if(mat[i][0] == 'O') dfs(mat, n, m, i, 0);
            if(mat[i][m-1] == 'O') dfs(mat, n, m, i, m-1);
        }
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(mat[i][j] == 'O') mat[i][j] = 'X';
                else if(mat[i][j] == '1') mat[i][j] = 'O';
            }
        }
        
        return mat;
        // code here
        // vector<vector<char>>dis(n,vector<char>(m,'X'));
        // vector<vector<int>>vis(n,vector<int>(m,0));
        // queue<pair<int,int>>q;
        // for(int i=0; i<n; i++)
        // {
        //     for(int j=0; j<m; j++)
        //     {
        //         if(i==0 || j==0 || i==n-1 || j==m-1)
        //         {
        //             if(mat[i][j]=='O')
        //             {
        //                 vis[i][j]=1;
        //                 q.push({i,j});
        //                 dis[i][j]='O';
        //             }
        //         }
        //     }
        // }
        // int dr[]={1,0,-1,0};
        // int dc[]={0,1,-0,-1};
        // while(!q.empty())
        // {
        //     int r=q.front().first;
        //     int c=q.front().second;
        //     q.pop();
        //     for(int i=0; i<4; i++)
        //     {
        //         int nr=r+dr[i];
        //         int nc=c+dc[i];
        //         if(nr<n && nr>=0 && nc<m && nc>=0 && mat[nr][nc]=='O' && !vis[nr][nc])
        //         {
        //             dis[nr][nc]='O';
        //             q.push({nr,nc});
        //             vis[nr][nc]=1;
        //         }
        //     }
        // }
        // return dis;
    }
